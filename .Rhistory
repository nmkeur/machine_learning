install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("BH")
install.packages("HiveR")
source("http://bioconductor.org/biocLite.R")
biocLite("monocle")
install.packages("cowplot")
install.packages("lpSolveAPI")
library("Scribe", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
help(Scribe)
??(Scribe)
??Scribe
data("neuron_network")
View(neuron_network)
data("neuron_sim_cds")
data("na_sim_cds")
data("example_graph")
data("neuron_network")
data("neuron_sim_cds")
data("na_sim_cds")
data("example_graph")
# neuron_network not exist
neuron_network$Type <- c('Neuron', 'Oligo', 'Astro', 'Neuron', 'AO',
'Neuron', 'Neuron', 'Neuron', 'Neuron', "Neuron",
'AO', 'AO', 'Astro', 'Oligo', 'Olig', 'Astro',
'Astro', 'Astro', 'Olig', 'Astro', 'Oligo')
#
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
library("HSMMSingleCell", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("fda.usc")
library("fda.usc", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
#
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
install.packages("roahd")
plot_gene_pairs_in_pseudotime(cds_subset = neuron_sim_cds[, ], gene_pairs_mat = as.matrix(neu
# we skip some functions below because they uses plotly package whose figures can be rendered
monocle:::monocle_theme_opts() + xacHelper::nm_theme()
# show the pair-wise gene plot (neuron_sim_cds is not a branch trajectory)
neuron_sim_cds@lowerDetectionLimit <- 0.01
plot_gene_pairs_in_pseudotime(cds_subset = neuron_sim_cds[, ], gene_pairs_mat = as.matrix(neu
# we skip some functions below because they uses plotly package whose figures can be rendered
monocle:::monocle_theme_opts() + xacHelper::nm_theme()
Scribe also supports plotting the scatter plot for the gene pair. plot gene pairs does exactly that but also reveal more abundantly distributed regions with a contour plot. In order to calculate the RDI values, Scribe computes the conditional mutual information of the state for Xt−σ, Yt and Yt−1 (see methods). We can use plot rdi gene pairs to visualize this state space. An interesting finding from the CCM is that time-lagged data for a single-variable is able to recover a shadow manifold corresponding to the original manifold. Here I will show the 3D space for the variable Pax6,Mash1,Hes5 and the shadow manifold for Yt,Yt−1,Yt−2 (Y corresponds to Mash1). You can immediately identify that the time-lagged shadow manifold captures the topography of the original manifold.
x <- exprs(neuron_sim_cds)['Pax6', ] y <- exprs(neuron_sim_cds)['Mash1', ] z <- exprs(neuron_sim_cds)['Hes5', ]
x <- exprs(neuron_sim_cds)['Pax6', ]
source("BioLite")
BiocManager::install("Biobase", version = "3.8")
library("Biobase", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
x <- exprs(neuron_sim_cds)['Pax6', ]
y <- exprs(neuron_sim_cds)['Mash1', ]
z <- exprs(neuron_sim_cds)['Hes5', ]
plot_rdi_gene_pairs(x, y)
#plot_rdi_gene_pairs(x, y)
plot_ly(type = 'scatter3d', x = log10(x), y = log10(y), z = log10(z), mode = 'markers') # sh inal space
plot_rdi_gene_pairs(x, y)
plot_rdi_pairs(x, y)
??Scribe
plot_rdi_pairs(x, y)
na_sim_cds <- estimate_turning_point(na_sim_cds)
na_sim_cds <- estimate_turning_point(na_sim_cds)
plot_time_delay(na_sim_cds, use_gene_short_name = F)
install.packages("princurve")
data <- read.csv("~/Downloads/normalised_filter_test(0.4_4).csv")
head(data)
head(data[1:5,])
head(data[1:5,1:5])
data <- read.table("~/Downloads/normalised_filter_test(0.4_4).csv", sep =";")
head(data[1:5,1:5])
data <- read.table("~/Downloads/normalised_filter_test(0.4_4).csv", sep =";", header=TRUE)
head(data[1:5,1:5])
data <- read.table("~/Downloads/normalised_filter_test(0.4_4).csv", sep =";", header=TRUE, check.names = FALSE)
head(data[1:5,1:5])
data2 <- as.data.frame(t(data))
head(data2[1:5,1:5])
head(data[1:5,1:5])
head(data2[1:5,1:5])
View(data2)
head(data[1:5,1:5])
rownames(data)
data <- read.table("~/Downloads/normalised_filter_test(0.4_4).csv", sep =";", header=TRUE,
check.names = FALSE, row.names = 1)
head(data[1:5,1:5])
rownames(data)
data2 <- as.data.frame(t(data))
head(data2[1:5,1:5])
write.table(data2,"t_normalised_filter_test(0.4_4).csv")
setwd("~/Documents/machine_learning/")
write.table(data2,"t_normalised_filter_test(0.4_4).csv")
datatrain <- read.table("~/Downloads/normalised_filter_train(0.4_4).csv", sep =";", header=TRUE,
check.names = FALSE, row.names = 1)
datatrain <- as.data.frame(t(datatrain))
write.table(datatrain,"t_normalised_filter_train(0.4_4).csv")
write.table(datatrain,"t_normalised_filter_train(0.4_4).csv", quote = FALSE, delim = ";")
write.table(datatrain,"t_normalised_filter_train(0.4_4).csv", quote = FALSE, sep = ";")
data <- read.table("~/Downloads/normalised_filter_test(0.4_4).csv", sep =";", header=TRUE,
check.names = FALSE, row.names = 1)
data2 <- as.data.frame(t(data))
write.table(data2,"t_normalised_filter_test(0.4_4).csv", quote = FALSE, sep = ";")
datatrain <- read.table("~/Downloads/normalised_filter_train(0.4_4).csv", sep =";", header=TRUE,
check.names = FALSE, row.names = 1)
datatrain <- as.data.frame(t(datatrain))
write.table(datatrain,"t_normalised_filter_train(0.4_4).csv", quote = FALSE, sep = ";")
colnames(data2)
colnames(data2[-1])
colnames(data2[7310])
datatest <- read.table("~/Downloads/normalised_filter_test(0.4_4).csv", sep =";", header=TRUE,
check.names = FALSE, row.names = 1)
datatest <- as.data.frame(t(datatest))
write.table(datatest,"t_normalised_filter_test(0.4_4).csv", quote = FALSE, sep = ";")
datatrain <- read.table("~/Downloads/normalised_filter_train(0.4_4).csv", sep =";", header=TRUE,
check.names = FALSE, row.names = 1)
datatrain <- as.data.frame(t(datatrain))
write.table(datatrain,"t_normalised_filter_train(0.4_4).csv", quote = FALSE, sep = ";")
